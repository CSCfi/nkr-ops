
- name: Create folder {{ app_base_path }}
  file: path={{ app_base_path }} state=directory owner={{ owner_user }} group={{ owner_user }} mode=0755

- name: Create flask app logging directory
  file: path=/var/log/{{ app_name }} state=directory owner={{ owner_user }} group={{ owner_user }}

- name: Create flask app log file and ensure file permissions
  copy: content="" dest=/var/log/{{ app_name }}/{{ app_name }}.log force=no owner={{ owner_user }} group={{ owner_user }} mode=0755

- name: Create logrotate entry for flask app log files
  template: src=templates/logrotate dest=/etc/logrotate.d/{{ app_name }}

- name: Clone project remote repo from branch {{ project_repo_branch }} to {{ app_base_path }}
  git: repo={{ project_repo }} dest={{ nkr_proxy_app_repo_path }} version={{ project_repo_branch }}
  become_user: "{{ owner_user }}"
  when: deployment_environment_id != 'local_development'

- block:

  - name: Clone project remote repo for local dev from branch {{ project_repo_branch }} to {{ app_base_path }}
    git: repo={{ project_repo }} dest={{ nkr_proxy_app_repo_path }} version={{ project_repo_branch }}
    become_user: "{{ owner_user }}"
    register: pull_cmd
    ignore_errors: yes

  - block:

    - name: Stash repo changes since most likely git pull failed because of modifications in the local repo
      command: git stash
      args:
        chdir: "{{ nkr_proxy_app_repo_path }}"

    - name: Re-pull latest data from project repo
      git: repo={{ project_repo }} dest="{{ nkr_proxy_app_repo_path }}" version={{ project_repo_branch }}
      become_user: "{{ owner_user }}"

    - name: Unstash git repo
      shell: git stash apply
      args:
        executable: /bin/bash
        chdir: "{{ nkr_proxy_app_repo_path }}"
      become_user: "{{ owner_user }}"

    when: pull_cmd.failed

  when: deployment_environment_id == 'local_development'

- block:

    # - name: Symlink pre-commit hook in .githooks/ to .git/hooks/
    #   shell: cd {{ app_base_path }}/.git/hooks; ln -sfn ../../.githooks/pre-commit pre-commit

    - name: Install pur
      pip: name=pur state=latest

    - name: Update app python package requirements to their latest versions
      shell: pur --force --requirement {{ nkr_proxy_app_repo_path }}/requirements.txt
      become_user: "{{ owner_user }}"

  when: deployment_environment_id == 'local_development'

- name: Install app python package requirements
  pip: requirements={{ nkr_proxy_app_repo_path }}/requirements.txt virtualenv={{ python_venv_path }}
  become_user: "{{ owner_user }}"

- name: Copy configs to {{ nkr_proxy_web_app_config_path }}
  include_role:
    name: flask_app_config
